package me.max.rest;

import java.sql.Connection;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import com.fasterxml.jackson.databind.ObjectMapper;

import me.max.dao.RequestDAO;
import me.max.dao.RequestDAOImpl;
import me.max.models.Request;
import me.max.util.ConnectionUtil;

@Path("/ers")
public class RequestService {

	private RequestDAO db;

	public RequestService() {
		super();
		this.db = new RequestDAOImpl();
	}

	@GET
	@Path("/all/{type}")
	@Consumes(MediaType.TEXT_PLAIN)
	@Produces(MediaType.APPLICATION_JSON)
	public String getAllTypedRequests(@PathParam("type") int type) {
		ObjectMapper mapper = new ObjectMapper();

		try (Connection con = ConnectionUtil.getConnection()) {
			List<Request> result = db.getAllTypedRequests(con, type);
			return mapper.writeValueAsString(result);
		} catch (Exception e) {
			return e.getMessage();
		}
	}

	@GET
	@Path("/user/{id}")
	@Consumes(MediaType.TEXT_PLAIN)

	@Produces(MediaType.APPLICATION_JSON)
	public String getAllUserRequests(@PathParam("id") int id) {
		ObjectMapper mapper = new ObjectMapper();

		try (Connection con = ConnectionUtil.getConnection()) {
			List<Request> result = db.getUserRequests(con, id);
			return mapper.writeValueAsString(result);
		} catch (Exception e) {
			return e.getMessage();
		}
	}

	@GET
	@Path("/user/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public String getTypedUserRequests(@PathParam("id") int id, @QueryParam("type") int type) {
		ObjectMapper mapper = new ObjectMapper();

		try (Connection con = ConnectionUtil.getConnection()) {
			List<Request> result = db.getUserTypedRequests(con, id, type);
			return mapper.writeValueAsString(result);
		} catch (Exception e) {
			return e.getMessage();
		}
	}

	//If this doesn't work can code around, but I would prefer this
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.TEXT_PLAIN)
	public Response handleRequest(ResolvePost post) {
		try (Connection con = ConnectionUtil.getConnection()){
			db.handleRequest(con, post.getuId(), post.getrId(), post.getStatus());
			return Response.ok().build();
		} catch (Exception e) {
			return Response.serverError().build();
		}
	}

}
